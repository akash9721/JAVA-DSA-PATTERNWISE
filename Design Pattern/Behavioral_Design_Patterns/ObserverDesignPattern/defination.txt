What is the Observer Design Pattern?
The Observer Design Pattern is a behavioral design pattern that establishes a one-to-many relationship between objects.
When one object (Subject) changes state, all dependent objects (Observers) are notified and updated automatically.

Real-World Example: YouTube Notification System
🖥 Scenario 1
YouTube Channel (Subject): A YouTube creator uploads a new video.
Subscribers (Observers): Viewers who have subscribed to the channel get notified.

🖥 Scenario 2
Amazone if products are out of stock if all people clicked notify me then when the product comes
notification goes to all the person

🚀 Why Use the Observer Pattern?
✅ Decoupling – The Subject and Observers are loosely coupled.
✅ Automatic Updates – When the Subject changes, all Observers get notified.
✅ Efficient Event Handling – Used in event-driven programming.

🎯 Industry Use Cases
1️⃣ Event-Driven Architecture (Microservices)
Kafka / RabbitMQ – Microservices act as publishers and subscribers.
Example: Order Service (Subject) publishes an event when a new order is placed, and Inventory Service (Observer) listens to update stock.
2️⃣ Stock Market Ticker System
Stock Market (Subject) updates stock prices.
Investors/Apps (Observers) get notified of price changes.
3️⃣ Social Media Notifications
Instagram/Twitter (Subject) – Posts a new tweet.
Followers (Observers) – Get notified when a new post is published.
4️⃣ Logging Framework
Application (Subject) generates logs.
Different logging mechanisms (Observers) store logs in a database, file, or monitoring tool.
