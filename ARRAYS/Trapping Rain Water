+++++++++++++++++++++using bruteforce approach +++++++++++++++++++++++++++++++++++++++++++

class Solution {
    public int trap(int[] height) {
        
        int left[]=new int[height.length];
        int right[]=new int[height.length];
        int containWater=0;
        left[0]=height[0];
        for(int i=1;i<height.length;i++){
            left[i]=Math.max(left[i-1],height[i]);
        }

        right[height.length-1]=height[height.length-1];
        for(int i=height.length-2;i>=0;i--){
            right[i]=Math.max(right[i+1],height[i]);
        }

        for(int i=0;i<height.length;i++){
            containWater+=Math.min(left[i],right[i])-height[i];
        }

        return containWater;
    }
}





+++++++++++++++++++++++++++using optimize (2 pointer approach) ++++++++++++++++++++++++++++++++++++++++
class Solution {
    public int trap(int[] height) {
        int maxWater=0;
        int n=height.length;
        int left=0,right=n-1;
        int leftMax=height[0];
        int rightMax=height[n-1];
        while(left<right){
            if(height[left]<height[right]){
                leftMax=Math.max(leftMax,height[left]);
                maxWater+=leftMax-height[left];
                left++;
            }
            else{
                rightMax=Math.max(rightMax,height[right]);
                maxWater+=rightMax-height[right];
                right--;
            }
        }
        return maxWater;
    }
}






Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9











